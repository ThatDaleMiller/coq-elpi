/* Derive a function "isK t -> true" iif t is "K .." for K constructor       */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

shorten std.{assert!, last, forall, map}.

namespace derive.isK {

pred ty i:term, i:list term, i:list term, o:term.
ty _ _ _ {{ bool }}.

% if the branch of the match (corresponding to KParams) is the one
% for K (the constructor we are generating the isK function for) we say
% true, else we say false.
pred branch i:term, i:term, i:term, i:list term, i:list term, o:term.
branch K KParams _ _ _ {{ true }} :- coq.safe-dest-app KParams K _, !.
branch _ _ _ _ _ {{ false }}.

pred body i:term, i:term, i:list term, i:list term, o:term.
body K _ Vars Tys R :-
  last Vars X,
  last Tys TX,
  coq.build-match X TX ty (branch K) R.

pred main-K i:string, i:term, i:term, i:constructor, o:prop.
main-K Prefix Ity Arity GRK Clause :-
  coq.env.global (indc GRK) K,
  coq.bind-ind-arity Ity Arity (body K) T,
  Name is Prefix ^ {coq.gref->id (indc GRK)},
  coq.env.add-const Name T _ _ IsK,
  Clause = (pi u\ isK-db GRK (global (const IsK) u) :- !).

pred main i:inductive, i:string, i:list prop.
main GR Prefix Clauses :-
  coq.env.global (indt GR) T,
  T = global _ UI,
  coq.env.indt GR UI _ _ _ Arity Kn _,
  map Kn (main-K Prefix T Arity) Clauses,
  forall Clauses (c\ coq.elpi.accumulate _ "derive.isK.db" (clause _ (before "isK-db:fail") c)).

}

% vim: set spelllang=:
