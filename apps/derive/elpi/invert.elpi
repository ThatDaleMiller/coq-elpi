/* Hide indexes using non-uniform parameters                                 */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

shorten std.{assert!, do!, map-i, map}.

namespace derive.invert {

pred the-inductive i:term, o:int.
pred the-nup-for-idx i:int, o:term.
pred the-suffix o:string.

pred invert i:indt-decl, o:indt-decl.
invert (parameter ID Imp Ty In) (parameter ID Imp Ty Out) :-
  @pi-parameter ID Ty p\ invert (In p) (Out p).
invert (inductive ID IsInd Arity Ks) (inductive ID1 IsInd Arity1 Ks1) :-
  ID1 is ID ^ {the-suffix},
  coq.arity->nparams Arity Nup,
  trivial-arity Arity 0 Arity1,
  coq.arity->term Arity ITy,
  @pi-parameter ID ITy i\ the-inductive i Nup => std.map (Ks i) (invert-c Nup Arity1) (Ks1 i).

pred invert-c i:int, i:arity, i:indc-decl, o:indc-decl.
invert-c Nup ArityI (constructor ID ArityK) (constructor ID1 ArityK1) :-
  ID1 is ID ^ {the-suffix},
  invert-c-params Nup ArityI ArityK ArityK1.

pred invert-c-params i:int, i:arity, i:arity, o:arity.
invert-c-params Nup (parameter ID Imp Ty In) (parameter _ _ _ In1) (parameter ID Imp Ty Out):- Nup > 0,
  Nup1 is Nup - 1,
  @pi-parameter ID Ty p\ invert-c-params Nup1 (In p) (In1 p) (Out p).
invert-c-params 0 Arity KArity Out :- invert-c-params-idx 0 Arity KArity Out.

pred invert-c-params-idx i:int, i:arity, i:arity, o:arity.
invert-c-params-idx Idx (parameter ID Imp Ty In) KArity (parameter ID Imp Ty Out) :-
  Idx1 is Idx + 1,
  @pi-parameter ID Ty p\ the-nup-for-idx Idx p => invert-c-params-idx Idx1 (In p) KArity (Out p).
invert-c-params-idx _ (arity _) KArity KArity1 :-
  invert-c-arity KArity KArity1.

pred invert-c-arity i:arity, o:arity.
invert-c-arity (parameter ID Imp Ty In) (parameter ID Imp Ty Out) :-
  @pi-parameter ID Ty p\ invert-c-arity (In p) (Out p).
invert-c-arity (arity T) (arity T1) :- invert-c-ty T T1.

pred invert-c-ty i:term, o:term.
invert-c-ty (prod N S T) (prod N S T1) :- !,
  @pi-decl N S x\ invert-c-ty (T x) (T1 x).
invert-c-ty I I :- the-inductive I _, !.
invert-c-ty (app[I|Args]) Out :- the-inductive I Nup, !,
  std.split-at Nup Args NUArgs Indexes,
  invert-c-ty-eq Indexes 0 (app[I|NUArgs]) Out.

pred invert-c-ty-eq i:list term, i:int, i:term, o:term.
invert-c-ty-eq [] _ X X.
invert-c-ty-eq [I|Idxs] N Acc {{ lp:V = lp:I -> lp:Out }} :-
  std.assert! (the-nup-for-idx N V) "no variable to equate to index expression",
  M is N + 1,
  invert-c-ty-eq Idxs M {coq.mk-app Acc [V]} Out.

pred trivial-arity i:arity, i:int, o:arity.
trivial-arity (parameter ID Imp Ty In) Ni (parameter ID Imp Ty Out) :-
  @pi-parameter ID Ty p\ trivial-arity (In p) Ni (Out p).
trivial-arity (arity (prod Name Ty In)) Ni (parameter ID explicit Ty Out) :-
  ID is "idx" ^ {term_to_string Ni},
  Ni1 is Ni + 1,
  @pi-decl Name Ty p\ trivial-arity (arity (In p)) Ni1 (Out p).
trivial-arity (arity T) _ (arity T).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred main i:inductive, i:string, o:list prop.
main GR Suffix Clauses :- do! [
  coq.env.indt-decl GR Decl,
  the-suffix Suffix => invert Decl Decl1,
  std.assert-ok! (coq.typecheck-indt-decl Decl1) "derive.invert generates illtyped term",
  coq.env.add-indt Decl1 Inv,
  coq.env.indt GR _ _ _ _ _ Ks _,
  coq.env.indt Inv _ _ _ _ _ KIs _,

  Clauses = [invert-db (indt GR) (indt Inv) | {std.map2 Ks KIs mk-k-clause}],
  std.forall Clauses (c\coq.elpi.accumulate _ "derive.invert.db" (clause _ _ c))
].

pred mk-k-clause i:constructor, i:constructor, o:prop.
mk-k-clause K1 K2 (invert-db (indc K1) (indc K2)).

}

% vim: set spelllang=:
