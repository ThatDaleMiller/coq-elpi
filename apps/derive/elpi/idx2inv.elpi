/* Links an inductive an its inverted form                                   */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

shorten std.{last, assert!, do!}.

namespace derive.idx2inv {

pred the-inductive o:term.
pred the-inverted o:term.
pred the-fix o:term.

pred params i:indt-decl, i:term, i:term, o:term.
params (parameter ID _ Ty In) T Ti (fun Name Ty Out) :-
  coq.id->name ID Name,
  @pi-decl Name Ty p\
    params (In p) {coq.mk-app T [p]} {coq.mk-app Ti [p]} (Out p).
params (inductive _ _ Arity _) T Ti (fix `rec` N FixTy FixBo) :-
  coq.arity->term Arity Ty,
  compute-fix-ty Ty T Ti N FixTy,
  @pi-decl `rec` Ty f\ the-fix f => compute-fix-bo Ty T Ti (FixBo f).

pred compute-fix-ty i:term, i:term, i:term, o:int, o:term.
compute-fix-ty (prod N S Tgt) T Ti M (prod N S T1) :- !,
  @pi-decl N S x\ compute-fix-ty (Tgt x) {coq.mk-app T [x]} {coq.mk-app Ti [x]} J (T1 x), M is J + 1.
compute-fix-ty _ S T 0 {{ lp:S -> lp:T }}.

pred compute-fix-bo i:term, i:term, i:term, o:term.
compute-fix-bo (prod N S Tgt) T Ti (fun N S T1) :- !,
  @pi-decl N S x\ compute-fix-bo (Tgt x) {coq.mk-app T [x]} Ti (T1 x).
compute-fix-bo _ T Ti (fun `x` T B) :-
  @pi-decl `x` T x\ coq.build-match x T (mk-rty Ti) (mk-branch) (B x).

pred mk-rty i:term, i:term, i:list term, i:list term, o:term.
mk-rty Ti _ Vars _ R :- std.appendR Idxs [_] Vars, coq.mk-app Ti Idxs R.

pred mk-branch i:term, i:term, i:list term, i:list term, o:term.
mk-branch K KTy Vars VarsTy R :- std.do! [
  coq.safe-dest-app K (global (indc GR) _) _,
  coq.safe-dest-app KTy (global (indt I) UI) IArgs,
  coq.env.indt I UI _ _ NP _ _ _,
  std.split-at NP IArgs Params IDX,
  Vars = RealArgs,
  VarsTy = RealArgsTy,
  assert! (invert-db (indc GR) InvK) "derive.idx2inv: No inverted constructor",
  coq.mk-app {coq.mk-app (global InvK _) Params} IDX K1,
  std.map2 RealArgs RealArgsTy maybe-rec-call Args,
  coq.mk-app K1 Args K2,
  std.map IDX mk-refl ArgsEq,
  coq.mk-app K2 ArgsEq R,
].

pred maybe-rec-call i:term, i:term, o:term.
maybe-rec-call X Ty R :- (coq.safe-dest-app Ty I Args), (the-inductive I), !, (the-fix F),
  I = global (indt Ind) UI,
  coq.env.indt Ind UI _ _ NP _ _ _,
  std.drop NP Args Rest,
  coq.mk-app {coq.mk-app F Rest} [X] R.
maybe-rec-call X _ X.

pred mk-refl i:term, o:term.
mk-refl E {{ @refl_equal _ lp:E }}.

pred main i:inductive, i:string, o:list prop.
main GR Infix [Clause] :- do! [
  T = global (indt GR) _,
  assert! (invert-db (indt GR) (indt GRinv)) "derive.idx2inv: No inverted inductive",
  Tinv = global (indt GRinv) _,
  Name is {coq.gref->id (indt GR)} ^ Infix ^ {coq.gref->id (indt GRinv)},

  coq.env.indt-decl GR D,
  the-inductive T => the-inverted Tinv => params D T Tinv R,

  std.assert-ok! (coq.typecheck R RT) "derive.idx2inv: illtyped term",
  coq.env.add-const Name R RT _ C,

  Clause = idx2inv-db GR GRinv C C,
  coq.elpi.accumulate _ "derive.idx2inv.db" (clause _ _ Clause)
].

}

% vim: set spelllang=:
