/* Entry point for all derivations                                           */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

namespace derive {

pred if-verbose i:prop.
if-verbose P :- get-option "verbose" tt, !, P.
if-verbose _.

pred chain i:list (A -> prop).
chain [].
chain [F|FS] :-
  if-verbose (coq.say "Derivation: " (F _)),
  (pi x\ stop x :- !, fail) => F C, !,
  C => chain FS.
chain [F|FS] :- coq.say "Derivation" F "failed", chain FS.

pred on_param1 i:inductive, i:(inductive -> string -> list prop -> prop), i:string, o:list prop.
on_param1 T F N C :- reali (global (indt T) _) (global (indt P) _), !, F P N C.

pred main i:inductive, i:string.
main T Prefix :-
  chain [
    derive.isK.main T                      {calc (Prefix ^ "isk_")},
    derive.map.main T                      {calc (Prefix ^ "map")},
    derive.projK.main T                    {calc (Prefix ^ "getk_")},
    derive.param1.main (indt T)            {calc (Prefix ^ "is_")},
    on_param1 T derive.param1.congr.main   "congr_",
    on_param1 T derive.param1.inhab.main   "_full",
    on_param1 T derive.param1.trivial.main "_trivial",
    on_param1 T derive.param1.functor.main "_functor",
    derive.induction.main T                {calc (Prefix ^ "induction")},
    derive.eq.main T                       {calc (Prefix ^ "eq")},
    derive.bcongr.main T                   {calc (Prefix ^ "bcongr_")},
    derive.eqK.main T                      {calc (Prefix ^ "eq_axiom_")},
    derive.eqcorrect.main T                {calc (Prefix ^ "eq_correct")},
    derive.eqOK.main T                     {calc (Prefix ^ "eq_OK")},
    derive.param2.main (indt T)            {calc (Prefix ^ "_R")},
    derive.invert.main T                   {calc (Prefix ^ "inv")},
    derive.idx2inv.main T                  "_to_",
  ].

pred decl+main i:indt-decl.
decl+main DS :- std.do! [
  indt-decl-name DS ModName,
  if-verbose (coq.say "Starting module" ModName),
  coq.env.begin-module ModName none,
  std.assert-ok! (coq.elaborate-indt-decl-skeleton DS D) "Inductive type declaration illtyped",
  if-verbose (coq.say "Declaring inductive" D),
  coq.env.add-indt D I,
  if-verbose (coq.say "Deriving"),
  main I "",
  if-verbose (coq.say "Done"),
  coq.env.end-module _,

  coq.env.indt I UI _ _ _ _ KS _,
  std.map KS (k\r\ r = indc k) KGRS,
  std.map KGRS coq.gref->id KNS,
  std.map KGRS (gr\r\ r = global gr UI) KTS,

  std.forall2 [ModName|KNS] [global (indt I) UI|KTS] short-alias,
].

pred short-alias i:id, i:term.
short-alias ID T :- @global! => coq.notation.add-abbreviation ID 0 T ff _.

pred indt-decl-name i:indt-decl, o:string.
indt-decl-name (parameter _ _ _ Decl) Name :-
  pi x\ indt-decl-name (Decl x) Name.
indt-decl-name (inductive Name _ _ _) Name.
indt-decl-name (record Name _ _ _) Name.

}
