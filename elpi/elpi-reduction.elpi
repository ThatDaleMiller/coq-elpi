/* Reduction (whd, hd-beta, ...)                                             */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% Entry points

typeabbrev stack (list term).

pred hd-beta i:term, i:stack, o:term, o:stack.
pred hd-beta-zeta i:term, i:stack, o:term, o:stack.
pred hd-beta-zeta-reduce i:term, o:term.
pred whd i:term, i:stack, o:term, o:stack.
pred whd-indc i:term, o:constructor, o:univ-instance, o:stack.
pred unwind i:term, i:stack, o:term.
pred whd1 i:term, o:term.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

shorten std.{append, nth, drop}.

% indirection, to be used if we add to the stack "match" frames
unwind T A R :- if (var T) (coq.mk-app-uvar T A R) (coq.mk-app T A R).

pred  nth-stack i:int, i:stack, o:stack, o:term, o:stack.
nth-stack 0 [X|XS] [] X XS :- !.
nth-stack N [X|XS] [X|Before] At After :-
  M is N - 1, nth-stack M XS Before At After.

% whd beta-iota-delta-zeta, main code
whd (app [Hd|Args]) C X XC :- !, whd Hd {append Args C} X XC.
whd (fun _ _ _ as X) [] X [] :- !.
whd (fun N T F) [B|C] X XC :- !,
  (pi x\ def x N T B => cache x BN_ => whd (F x) C (F1 x) (C1 x)), X = F1 B, XC = C1 B.
whd (let N T B F) C X XC :- !,
  (pi x\ def x N T B => cache x BN_ => whd (F x) C (F1 x) (C1 x)), X = F1 B, XC = C1 B.
whd (global (const GR) UI) C X XC :- unfold GR UI C D DC, !, whd D DC X XC.
whd (global (const GR) _ as HD) C X XC :- coq.env.const-primitive? GR, !,
  unwind HD C Orig,
  coq.reduction.lazy.whd_all Orig R,
  if (same_term Orig R) (X = HD, XC = C) (whd R [] X XC).
whd (match A _ L) C X XC :- whd-indc A GR UI KA, !,
  whd {match-red GR UI KA L C} X XC.
whd (fix _ N _ F as Fix) C X XC :- nth-stack N C LA A RA, whd-indc A GR UI KA, !,
  whd {fix-red F Fix LA GR UI KA RA} X XC.
whd N C X XC :- name N, def N _ _ V, !, cache-whd N VN V, whd VN C X XC.
whd X C X C.

% assert A reduces to a constructor
whd-indc A GR UI KA :- whd A [] VA C, !, VA = global (indc GR) UI, KA = C.

% asserts progress was made. TODO: optimization: get rid of = test
whd1 T R :-
  whd T [] HD ARGS,
  unwind HD ARGS R,
  not(same_term T R).

% iota step
pred match-red i:constructor, i:univ-instance, i:list term, i:list term, i:stack, o:term, o:stack.
match-red GR UI KArgs BL C X XC :-
  coq.env.indc GR UI Lno _ Ki _,
  drop Lno KArgs Args,
  nth Ki BL Bi,
  hd-beta {coq.mk-app Bi Args} C X XC.

% iota step
pred fix-red
  i:(term -> term), i:term,
  i:list term, i:constructor, i:univ-instance, i:list term, i:list term, o:term, o:stack. 
fix-red F Fix LA GR UI KA RA X XC :-
  append LA [{coq.mk-app (global (indc GR) UI) KA}|RA] ArgsWRedRecNo,
  hd-beta {coq.mk-app (F Fix) ArgsWRedRecNo} [] X XC.

pred unfold % delta (global constants) + hd-beta
  i:constant,    % name
  i:univ-instance,
  i:stack,   % args
  o:term,     % body
  o:stack.    % args after hd-beta
unfold GR UI A BO BOC :- coq.env.const GR UI (some B) _, hd-beta B A BO BOC.

% ensures its first argument is the whd of the second
pred cache i:term, o:term.
pred cache-whd i:term, i:term, i:term.
cache-whd N K V :- cache N VN, var VN, !, whd V [] X XC, unwind X XC VN, K = VN.
cache-whd N K _ :- cache N K, !.
cache-whd N _ _ :- coq.error "anomaly: def with no cache:" {coq.term->string N}.

hd-beta (app [Hd|Args]) S X C :- !, hd-beta Hd {append Args S} X C.
hd-beta (fun _ _ F) [A|AS] X C :- !, hd-beta (F A) AS X C.
:name "hd-beta:end"
hd-beta X C X C.

hd-beta-zeta (app [Hd|Args]) S X C :- !, hd-beta-zeta Hd {append Args S} X C.
hd-beta-zeta (fun _ _ F) [A|AS] X C :- !, hd-beta-zeta (F A) AS X C.
hd-beta-zeta (let _ _ B F) AS X C :- !, hd-beta-zeta (F B) AS X C.
:name "hd-beta-zeta:end"
hd-beta-zeta X C X C.

hd-beta-zeta-reduce T R :- hd-beta-zeta T [] H S, unwind H S R.


